-- ======================================
-- Complete Therapy Management System
-- PostgreSQL/Supabase Compatible
-- ======================================

-- Core User Models
CREATE TABLE IF NOT EXISTS person (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  birthdate DATE,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS address (
  id SERIAL PRIMARY KEY,
  person_id INTEGER NOT NULL REFERENCES person(id),
  street VARCHAR(200) NOT NULL,
  city VARCHAR(100) NOT NULL,
  state VARCHAR(100),
  zip VARCHAR(20),
  country VARCHAR(100),
  type VARCHAR(20),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS app_user (
  id SERIAL PRIMARY KEY,
  person_id INTEGER UNIQUE NOT NULL REFERENCES person(id),
  email VARCHAR(254) UNIQUE NOT NULL,
  username VARCHAR(150) UNIQUE NOT NULL,
  password VARCHAR(128) NOT NULL,
  status VARCHAR(20) DEFAULT 'active',
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS therapist (
  id SERIAL PRIMARY KEY,
  user_id INTEGER UNIQUE NOT NULL REFERENCES app_user(id),
  resume TEXT,
  onboard_date DATE DEFAULT now(),
  public_id UUID DEFAULT gen_random_uuid(),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  CONSTRAINT therapist_public_id_uniq UNIQUE (public_id)
);

CREATE INDEX idx_therapist_public_id ON therapist(public_id);

CREATE TABLE IF NOT EXISTS client (
  id SERIAL PRIMARY KEY,
  person_id INTEGER UNIQUE NOT NULL REFERENCES person(id),
  onboard_date DATE DEFAULT now(),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS caregiver (
  id SERIAL PRIMARY KEY,
  user_id INTEGER UNIQUE NOT NULL REFERENCES app_user(id),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

-- Schedule and Time Off
CREATE TABLE IF NOT EXISTS therapist_schedule (
  id SERIAL PRIMARY KEY,
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  day VARCHAR(10) NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  status VARCHAR(20) DEFAULT 'active',
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (therapist_id, day, start_time, end_time)
);

CREATE TABLE IF NOT EXISTS therapist_time_off (
  id SERIAL PRIMARY KEY,
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  date_start TIMESTAMP NOT NULL,
  date_end TIMESTAMP NOT NULL,
  status VARCHAR(20) DEFAULT 'pending',
  reason TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

-- Relationship Tables
CREATE TABLE IF NOT EXISTS client_therapist (
  id SERIAL PRIMARY KEY,
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  client_id INTEGER NOT NULL REFERENCES client(id),
  status VARCHAR(20) DEFAULT 'active',
  assigned_date DATE DEFAULT now(),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (therapist_id, client_id)
);

CREATE TABLE IF NOT EXISTS caregiver_client (
  id SERIAL PRIMARY KEY,
  caregiver_id INTEGER NOT NULL REFERENCES caregiver(id),
  client_id INTEGER NOT NULL REFERENCES client(id),
  status VARCHAR(20) DEFAULT 'active',
  assigned_date DATE DEFAULT now(),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (caregiver_id, client_id)
);

-- Financial and Insurance Models
CREATE TABLE IF NOT EXISTS currency (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) UNIQUE NOT NULL,
  code VARCHAR(3) UNIQUE NOT NULL,
  symbol VARCHAR(5),
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS insurance (
  id SERIAL PRIMARY KEY,
  name VARCHAR(200) NOT NULL,
  phone VARCHAR(20),
  fax VARCHAR(20),
  website VARCHAR(200),
  description TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS therapy (
  id SERIAL PRIMARY KEY,
  name VARCHAR(200) NOT NULL,
  code VARCHAR(20) UNIQUE NOT NULL,
  description TEXT,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS therapy_plan (
  id SERIAL PRIMARY KEY,
  therapy_id INTEGER NOT NULL REFERENCES therapy(id),
  name VARCHAR(200) NOT NULL,
  description TEXT,
  sessions_count INTEGER,
  amount DECIMAL(10,2) NOT NULL,
  currency_id INTEGER NOT NULL REFERENCES currency(id),
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (therapy_id, name)
);

-- Rename authorization table to avoid reserved word
CREATE TABLE IF NOT EXISTS auth_authorization (
  id SERIAL PRIMARY KEY,
  number VARCHAR(50) UNIQUE NOT NULL,
  client_id INTEGER NOT NULL REFERENCES client(id),
  therapy_id INTEGER NOT NULL REFERENCES therapy(id),
  insurance_id INTEGER NOT NULL REFERENCES insurance(id),
  status VARCHAR(20) DEFAULT 'pending',
  time_approved INTEGER NOT NULL,
  max_time_day INTEGER,
  max_time_week INTEGER,
  max_time_month INTEGER,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS therapist_therapy_plan (
  id SERIAL PRIMARY KEY,
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  therapy_id INTEGER NOT NULL REFERENCES therapy(id),
  plan_id INTEGER NOT NULL REFERENCES therapy_plan(id),
  status VARCHAR(20) DEFAULT 'active',
  rate DECIMAL(10,2) NOT NULL,
  rate_type VARCHAR(20) NOT NULL,
  currency_id INTEGER NOT NULL REFERENCES currency(id),
  effective_date DATE DEFAULT now(),
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (therapist_id, therapy_id, plan_id)
);

CREATE TABLE IF NOT EXISTS auth_authorization_usage (
  id SERIAL PRIMARY KEY,
  authorization_id INTEGER NOT NULL REFERENCES auth_authorization(id),
  session_date TIMESTAMP NOT NULL,
  duration_minutes INTEGER NOT NULL,
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS insurance_coverage (
  id SERIAL PRIMARY KEY,
  insurance_id INTEGER NOT NULL REFERENCES insurance(id),
  therapy_id INTEGER NOT NULL REFERENCES therapy(id),
  coverage_percentage DECIMAL(5,2) NOT NULL,
  max_amount_per_session DECIMAL(10,2),
  currency_id INTEGER NOT NULL REFERENCES currency(id),
  is_active BOOLEAN DEFAULT TRUE,
  effective_date DATE DEFAULT now(),
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now(),
  UNIQUE (insurance_id, therapy_id)
);

CREATE TABLE IF NOT EXISTS plan_purchase (
  id SERIAL PRIMARY KEY,
  client_id INTEGER NOT NULL REFERENCES client(id),
  plan_id INTEGER NOT NULL REFERENCES therapy_plan(id),
  purchased_sessions INTEGER NOT NULL,
  purchase_date DATE NOT NULL,
  expiry_date DATE,
  status VARCHAR(20) DEFAULT 'active',
  total_amount_paid DECIMAL(10,2) NOT NULL,
  currency_id INTEGER NOT NULL REFERENCES currency(id),
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS appointment (
  id SERIAL PRIMARY KEY,
  client_id INTEGER NOT NULL REFERENCES client(id),
  therapist_id INTEGER NOT NULL REFERENCES therapist(id),
  plan_purchase_id INTEGER NOT NULL REFERENCES plan_purchase(id),
  authorization_id INTEGER NOT NULL REFERENCES auth_authorization(id),
  appointment_date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  duration_minutes INTEGER NOT NULL,
  status VARCHAR(30) DEFAULT 'scheduled',
  payed BOOLEAN DEFAULT FALSE,
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS plan_usage_summary (
  id SERIAL PRIMARY KEY,
  plan_purchase_id INTEGER UNIQUE NOT NULL REFERENCES plan_purchase(id),
  sessions_used INTEGER DEFAULT 0,
  sessions_remaining INTEGER NOT NULL,
  last_session_date DATE,
  last_updated TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS authorization_usage_summary (
  id SERIAL PRIMARY KEY,
  authorization_id INTEGER UNIQUE NOT NULL REFERENCES auth_authorization(id),
  total_time_used_minutes INTEGER DEFAULT 0,
  total_time_remaining_minutes INTEGER NOT NULL,
  total_sessions_count INTEGER DEFAULT 0,
  last_session_date DATE,
  last_updated TIMESTAMP DEFAULT now()
);

CREATE TABLE IF NOT EXISTS payment (
  id SERIAL PRIMARY KEY,
  client_id INTEGER NOT NULL REFERENCES client(id),
  plan_purchase_id INTEGER NOT NULL REFERENCES plan_purchase(id),
  appointment_id INTEGER REFERENCES appointment(id),
  amount DECIMAL(10,2) NOT NULL,
  currency_id INTEGER NOT NULL REFERENCES currency(id),
  payment_date DATE NOT NULL,
  payment_method VARCHAR(50),
  status VARCHAR(20) DEFAULT 'pending',
  notes TEXT,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);
